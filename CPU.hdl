// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
//https://www.bencode.net/images/nand2tetris-cpu.jpg

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	// Made from diagram at: https://github.com/bentikki/Nand2TetrisDiagrams
	// Direct link to CPU diagram: https://raw.githubusercontent.com/bentikki/Nand2TetrisDiagrams/main/BTO%20-%20PCU%20Diagram.png
	
	// ---- WriteM selection
	And(a=instruction[3], b=instruction[15], out=writeM);
	
	// ---- Register A selection
	// Load selection
	Not(in=instruction[15], out=notIns15);
	And(a=instruction[15], b=instruction[5], out=ins15And);
	Or(a=notIns15,b=ins15And, out=regAload);
	
	// Entry Mux
	Mux16(a=instruction,b=aluOut,sel=instruction[15], out=mux16RegAin);
	
	// Register A & addressM out
	Register(in=mux16RegAin,load=regAload, out=regAout, out[0..14]=addressM);
	
	// ---- ALU Y input selection
	Mux16(a=regAout,b=inM,sel=instruction[12], out=ALUinputY);
	
	// ---- Register D selection
	// Load selection
	And(a=instruction[15],b=instruction[4], out=regDload);
	
	// Register D
	Register(in=aluOut,load=regDload, out=regDout);
	
	// ---- ALU
	ALU(x=regDout,y=ALUinputY,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);
	
	// ---- PC selection
	// -- Load and IN selection
	// Not Zr Ng line
	Not(in=zr, out=zrNot);
	Not(in=ng, out=ngNot);
	And(a=zrNot,b=ngNot, out=zrNgNotAnd);
	
	// And first 3
	And(a=instruction[0],b=instruction[15], out=andIns0Ins15);
	And(a=instruction[1],b=instruction[15], out=andIns1Ins15);
	And(a=instruction[2],b=instruction[15], out=andIns2Ins15);
	
	// And second 3
	And(a=zrNgNotAnd,b=andIns0Ins15, out=zrNgNotAndIns0Ins15);
	And(a=zr,b=andIns1Ins15, out=zrANDandIns1Ins15);	
	And(a=ng,b=andIns2Ins15, out=ngANDandIns2Ins15);	
	
	Or(a=zrNgNotAndIns0Ins15,b=zrANDandIns1Ins15, out=loadORnot1And15);
	
	// Pc load in final
	Or(a=loadORnot1And15,b=ngANDandIns2Ins15, out=pcLoadIn);
	Not(in=pcLoadIn, out=pcLoadInNot);
	
	// PC out
	PC(in=regAout,load=pcLoadIn,inc=pcLoadInNot,reset=reset, out[0..14]=pc);
}